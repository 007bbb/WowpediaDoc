local data = {
	C_AuctionHouse = {
		hasCategories = true,
		api = {
			above = [[Searches are split into 4 sections:<br>
				- Summary (does queries by name and item key)<br>
				- Search (including SellSearch) that returns per-auction results for use when buying or selling<br>
				- Owned (similar to Search, but for auctions you've posted)<br>
				- Replicate (returns all current auctions on the AH, but in a way that is incompatible with the other searches)
			]],
			{
				"C_AuctionHouse.GetAuctionInfoByID",
				"C_AuctionHouse.GetAuctionItemSubClasses",
				"C_AuctionHouse.GetFilterGroups",
				"C_AuctionHouse.GetQuoteDurationRemaining",
				"C_AuctionHouse.GetTimeLeftBandInfo",
				"C_AuctionHouse.IsThrottledMessageSystemReady",
			},
			{
				category = "ItemKey",
				"C_AuctionHouse.MakeItemKey",
				"C_AuctionHouse.GetItemKeyFromItem",
				"C_AuctionHouse.GetItemKeyInfo",
				"C_AuctionHouse.GetItemKeyRequiredLevel",
			},
			{
				category = "Purchase",
				"C_AuctionHouse.PlaceBid",
				"C_AuctionHouse.StartCommoditiesPurchase",
				"C_AuctionHouse.CancelCommoditiesPurchase",
				"C_AuctionHouse.ConfirmCommoditiesPurchase",
			},
			{
				category = "Post",
				"C_AuctionHouse.PostItem",
				"C_AuctionHouse.PostCommodity",
				"C_AuctionHouse.CalculateItemDeposit",
				"C_AuctionHouse.CalculateCommodityDeposit",
				"C_AuctionHouse.GetAvailablePostCount",
				"C_AuctionHouse.GetItemCommodityStatus",
				"C_AuctionHouse.IsSellItemValid",
			},
			{
				category = "Cancel",
				"C_AuctionHouse.CanCancelAuction",
				"C_AuctionHouse.CancelAuction",
				"C_AuctionHouse.CancelSell",
				"C_AuctionHouse.GetCancelCost",
			},
			{
				category = "Bid Info",
				"C_AuctionHouse.GetBidInfo",
				"C_AuctionHouse.GetBidType",
				"C_AuctionHouse.GetBids",
				"C_AuctionHouse.GetMaxBidItemBid",
				"C_AuctionHouse.GetMaxBidItemBuyout",
				"C_AuctionHouse.GetMaxItemSearchResultBid",
				"C_AuctionHouse.GetNumBids",
				"C_AuctionHouse.GetNumBidTypes",
				"C_AuctionHouse.QueryBids",
				"C_AuctionHouse.HasFullBidResults",
			},
			{
				category = "<span class='apitype'>Summary</span>",
				"C_AuctionHouse.GetBrowseResults",
				"C_AuctionHouse.GetExtraBrowseInfo",
				"C_AuctionHouse.RequestMoreBrowseResults",
				"C_AuctionHouse.SendBrowseQuery",
				"C_AuctionHouse.HasFullBrowseResults",
				"C_AuctionHouse.SearchForItemKeys",
			},
			{
				category = "<span class='apitype'>Search</span>",
				"C_AuctionHouse.SendSearchQuery",
				"C_AuctionHouse.SendSellSearchQuery",
				"C_AuctionHouse.HasSearchResults",
				"C_AuctionHouse.GetItemSearchResultInfo",
				"C_AuctionHouse.GetItemSearchResultsQuantity",
				"C_AuctionHouse.GetNumItemSearchResults",
				"C_AuctionHouse.RefreshItemSearchResults",
				"C_AuctionHouse.RequestMoreItemSearchResults",
				"C_AuctionHouse.HasFullItemSearchResults",
				"C_AuctionHouse.GetMaxItemSearchResultBuyout",
				"C_AuctionHouse.GetCommoditySearchResultInfo",
				"C_AuctionHouse.GetCommoditySearchResultsQuantity",
				"C_AuctionHouse.GetNumCommoditySearchResults",
				"C_AuctionHouse.HasFullCommoditySearchResults",
				"C_AuctionHouse.RefreshCommoditySearchResults",
				"C_AuctionHouse.RequestMoreCommoditySearchResults",
				"C_AuctionHouse.GetMaxCommoditySearchResultPrice",
			},
			{
				category = "<span class='apitype'>Owned</span>",
				"C_AuctionHouse.GetMaxOwnedAuctionBid",
				"C_AuctionHouse.GetMaxOwnedAuctionBuyout",
				"C_AuctionHouse.GetNumOwnedAuctions",
				"C_AuctionHouse.GetNumOwnedAuctionTypes",
				"C_AuctionHouse.GetOwnedAuctionInfo",
				"C_AuctionHouse.GetOwnedAuctions",
				"C_AuctionHouse.GetOwnedAuctionType",
				"C_AuctionHouse.HasFullOwnedAuctionResults",
				"C_AuctionHouse.QueryOwnedAuctions",
				"C_AuctionHouse.RequestOwnedAuctionBidderInfo",
			},
			{
				category = "<span class='apitype'>Replicate</span>",
				"C_AuctionHouse.ReplicateItems",
				"C_AuctionHouse.GetNumReplicateItems",
				"C_AuctionHouse.GetReplicateItemBattlePetInfo",
				"C_AuctionHouse.GetReplicateItemInfo",
				"C_AuctionHouse.GetReplicateItemLink",
				"C_AuctionHouse.GetReplicateItemTimeLeft",
			},
			{
				category = "Favorites",
				"C_AuctionHouse.FavoritesAreAvailable",
				"C_AuctionHouse.HasFavorites",
				"C_AuctionHouse.HasMaxFavorites",
				"C_AuctionHouse.IsFavoriteItem",
				"C_AuctionHouse.RequestFavorites",
				"C_AuctionHouse.SearchForFavorites",
				"C_AuctionHouse.SetFavoriteItem",
			},
			{
				category = "Window",
				"C_AuctionHouse.CloseAuctionHouse",
			},
		},
		widget = {
			"GameTooltip:SetItemKey",
		},
		event = {
			{
				"AUCTION_HOUSE_NEW_RESULTS_RECEIVED",
				"ITEM_KEY_ITEM_INFO_RECEIVED",
				"ITEM_PURCHASED",
			},
			{
				category = "Purchase",
				"BID_ADDED",
				"COMMODITY_PRICE_UNAVAILABLE",
				"COMMODITY_PRICE_UPDATED",
				"COMMODITY_PURCHASE_FAILED",
				"COMMODITY_PURCHASE_SUCCEEDED",
				"COMMODITY_PURCHASED",
			},
			{
				category = "Post",
				"AUCTION_HOUSE_AUCTION_CREATED",
				"AUCTION_MULTISELL_FAILURE",
				"AUCTION_MULTISELL_START",
				"AUCTION_MULTISELL_UPDATE",
			},
			{
				category = "Cancel",
				"AUCTION_CANCELED",
			},
			{
				category = "Bid Info",
				"AUCTION_HOUSE_NEW_BID_RECEIVED",
				"BIDS_UPDATED",
			},
			{
				category = "<span class='apitype'>Summary</span>",
				"AUCTION_HOUSE_BROWSE_FAILURE",
				"AUCTION_HOUSE_BROWSE_RESULTS_ADDED",
				"AUCTION_HOUSE_BROWSE_RESULTS_UPDATED",
				"EXTRA_BROWSE_INFO_RECEIVED",
			},
			{
				category = "<span class='apitype'>Search</span>",
				"ITEM_SEARCH_RESULTS_ADDED",
				"ITEM_SEARCH_RESULTS_UPDATED",
				"COMMODITY_SEARCH_RESULTS_ADDED",
				"COMMODITY_SEARCH_RESULTS_UPDATED",
			},
			{
				category = "<span class='apitype'>Owned</span>",
				"OWNED_AUCTION_BIDDER_INFO_RECEIVED",
				"OWNED_AUCTIONS_UPDATED",
			},
			{
				category = "<span class='apitype'>Replicate</span>",
				"REPLICATE_ITEM_LIST_UPDATE",
			},
			{
				category = "Favorites",
				"AUCTION_HOUSE_FAVORITES_UPDATED",
			},
			{
				category = "Window",
				"AUCTION_HOUSE_SHOW",
				"AUCTION_HOUSE_CLOSED",
				"AUCTION_HOUSE_DISABLED",
				"AUCTION_HOUSE_SCRIPT_DEPRECATED",
			},
			{
				category = "Throttled",
				"AUCTION_HOUSE_THROTTLED_MESSAGE_DROPPED",
				"AUCTION_HOUSE_THROTTLED_MESSAGE_QUEUED",
				"AUCTION_HOUSE_THROTTLED_MESSAGE_RESPONSE_RECEIVED",
				"AUCTION_HOUSE_THROTTLED_MESSAGE_SENT",
				"AUCTION_HOUSE_THROTTLED_SYSTEM_READY",
			},
			{
				category = "Notification",
				"AUCTION_HOUSE_AUCTIONS_EXPIRED",
				"AUCTION_HOUSE_SHOW_NOTIFICATION",
				"AUCTION_HOUSE_SHOW_FORMATTED_NOTIFICATION",
				"AUCTION_HOUSE_SHOW_COMMODITY_WON_NOTIFICATION",
				"AUCTION_HOUSE_SHOW_ERROR",
			},
		},
	},
	AuctionHouse = {
		label = "Classic Auction House",
		hasCategories = true,
		api = {
			{
				category = "Purchase",
				"PlaceAuctionBid",
			},
			{
				category = "Post",
				"PostAuction",
				--"StartAuction",
				"CancelSell",
				"ClickAuctionSellItemButton",
				"GetAuctionSellItemInfo",
				"SetAuctionsTabShowing",
			},
			{
				category = "Deposit Info",
				-- "CalculateAuctionDeposit",
				"GetAuctionDeposit",
				"GetAuctionHouseDepositRate",
			},
			{
				category = "Cancel",
				"CanCancelAuction",
				"CancelAuction",
			},
			{
				category = "Summary",
				"CanSendAuctionQuery",
				"GetAuctionItemBattlePetInfo",
				"GetAuctionItemInfo",
				"GetAuctionItemLink",
				"GetAuctionItemSubClasses",
				"GetAuctionItemTimeLeft",
				"GetBidderAuctionItems",
				"GetNumAuctionItems",
				"GetOwnerAuctionItems",
				"GetSelectedAuctionItem",
				"QueryAuctionItems",
				"SetSelectedAuctionItem",
			},
			{
				category = "Sort",
				"GetAuctionSort",
				"IsAuctionSortReversed",
				"SortAuctionApplySort",
				"SortAuctionClearSort",
				"SortAuctionItems",
				"SortAuctionSetSort",
			},
			{
				category = "Window",
				"CloseAuctionHouse",
			},
		},
		widget = {
			"GameTooltip:SetAuctionItem",
			"GameTooltip:SetAuctionSellItem",
		},
		event = {
			{
				category = "Post",
				"NEW_AUCTION_UPDATE",
				"AUCTION_MULTISELL_START",
				"AUCTION_MULTISELL_UPDATE",
				"AUCTION_MULTISELL_FAILURE",
			},
			{
				category = "Summary",
				"AUCTION_BIDDER_LIST_UPDATE",
				"AUCTION_ITEM_LIST_UPDATE",
				"AUCTION_OWNED_LIST_UPDATE",
			},
			{
				category = "Window",
				"AUCTION_HOUSE_CLOSED",
				"AUCTION_HOUSE_SHOW",
				"AUCTION_HOUSE_DISABLED",
				"AUCTION_HOUSE_SCRIPT_DEPRECATED",
			},
		},
	},
	C_EquipmentSet = {
		hasCategories = true,
		api = {
			{
				category = "Data",
				"C_EquipmentSet.CanUseEquipmentSets",
				"C_EquipmentSet.GetNumEquipmentSets",
				"C_EquipmentSet.GetEquipmentSetID",
				"C_EquipmentSet.GetEquipmentSetIDs",
				"C_EquipmentSet.GetEquipmentSetInfo",
				"C_EquipmentSet.GetItemIDs",
				"C_EquipmentSet.GetItemLocations",
				"C_EquipmentSet.EquipmentSetContainsLockedItems",
				"GetInventoryItemEquippedUnusable",
				"GetInventoryItemsForSlot",
				"IsInventoryItemAnUpgrade",
			},
			{
				category = "Actions",
				"C_EquipmentSet.CreateEquipmentSet",
				"C_EquipmentSet.PickupEquipmentSet",
				"C_EquipmentSet.UseEquipmentSet",
				"C_EquipmentSet.SaveEquipmentSet",
				"C_EquipmentSet.ModifyEquipmentSet",
				"C_EquipmentSet.DeleteEquipmentSet",
			},
			{
				category = "Spec",
				"C_EquipmentSet.GetEquipmentSetAssignedSpec",
				"C_EquipmentSet.GetEquipmentSetForSpec",
				"C_EquipmentSet.AssignSpecToEquipmentSet",
				"C_EquipmentSet.UnassignEquipmentSetSpec",
			},
			{
				category = "Ignore",
				"C_EquipmentSet.GetIgnoredSlots",
				"C_EquipmentSet.IsSlotIgnoredForSave",
				"C_EquipmentSet.IgnoreSlotForSave",
				"C_EquipmentSet.UnignoreSlotForSave",
				"C_EquipmentSet.ClearIgnoredSlotsForSave",
			},
		},
		framexml = {
			"EquipmentManager_EquipSet",
			"EquipmentManager_GetItemInfoByLocation",
			"EquipmentManager_UnpackLocation",
			"GetEquipmentSetIconInfo",
			"RefreshEquipmentSetIconInfo",
		},
		widget = {
			"GameTooltip:SetEquipmentSet",
		},
		script = {
			"OnTooltipSetEquipmentSet",
		},
		event = {
			"EQUIPMENT_SETS_CHANGED",
			"EQUIPMENT_SWAP_FINISHED",
			"EQUIPMENT_SWAP_PENDING",
			"TRANSMOG_OUTFITS_CHANGED",
			"WEAR_EQUIPMENT_SET",
		},
	},
	C_GamePad = {
		hasCategories = true,
		api = {
			{
				"C_GamePad.IsEnabled",
				"C_GamePad.AddSDLMapping",
				"C_GamePad.GetPowerLevel",
			},
			{
				category = "Devices",
				"C_GamePad.GetActiveDeviceID",
				"C_GamePad.GetAllDeviceIDs",
				"C_GamePad.GetCombinedDeviceID",
				"C_GamePad.GetDeviceMappedState",
				"C_GamePad.GetDeviceRawState",
			},
			{
				category = "Configs",
				"C_GamePad.GetAllConfigIDs",
				"C_GamePad.GetConfig",
				"C_GamePad.SetConfig",
				"C_GamePad.ApplyConfigs",
				"C_GamePad.DeleteConfig",
				"C_GamePad.AxisIndexToConfigName",
				"C_GamePad.ButtonIndexToConfigName",
				"C_GamePad.StickIndexToConfigName",
			},
			{
				category = "Bindings",
				"C_GamePad.ButtonBindingToIndex",
				"C_GamePad.ButtonIndexToBinding",
				"IsBindingForGamePad",
			},
			{
				category = "Cursor",
				"CanAutoSetGamePadCursorControl",
				"CanGamePadControlCursor",
				"IsGamePadCursorControlEnabled",
				"SetGamePadCursorControl",
			},
			{
				category = "Free look",
				"IsGamePadFreelookEnabled",
				"SetGamePadFreeLook",
			},
			{
				category = "Vibration",
				"C_GamePad.SetVibration",
				"C_GamePad.StopVibration",
			},
			{
				category = "Led",
				"C_GamePad.GetLedColor",
				"C_GamePad.SetLedColor",
				"C_GamePad.ClearLedColor",
			},
		},
		widget = {
			"Frame:EnableGamePadButton",
			"Frame:EnableGamePadStick",
			"Frame:IsGamePadButtonEnabled",
			"Frame:IsGamePadStickEnabled",
		},
		script = {
			"OnGamePadButtonDown",
			"OnGamePadButtonUp",
			"OnGamePadStick",
		},
		event = {
			"GAME_PAD_CONFIGS_CHANGED",
			"GAME_PAD_CONNECTED",
			"GAME_PAD_DISCONNECTED",
			"GAME_PAD_POWER_CHANGED",
		},
		cvar = {
			{
				"GamePadEnable",
				"GamePadAbbreviatedBindingReverse",
				"GamePadSingleActiveID",
				"GamePadVibrationStrength",
				"GamePadFactionColor",
			},
			{
				category = "Camera",
				"GamePadCameraLookMaxPitch",
				"GamePadCameraLookMaxYaw",
				"GamePadCameraPitchSpeed",
				"GamePadCameraYawSpeed",
				"GamePadTurnWithCamera",
				"CameraFollowGamepadAdjustDelay",
				"CameraFollowGamepadAdjustEaseIn",
			},
			{
				category = "Cursor",
				"GamePadCursorAutoDisableJump",
				"GamePadCursorAutoDisableSticks",
				"GamePadCursorAutoEnable",
				"GamePadCursorCenteredEmulation",
				"GamePadCursorCentering",
				"GamePadCursorForTargeting",
				"GamePadCursorLeftClick",
				"GamePadCursorOnLogin",
				"GamePadCursorPushCamera",
				"GamePadCursorRightClick",
				"GamePadCursorSpeedAccel",
				"GamePadCursorSpeedMax",
				"GamePadCursorSpeedStart",
				"GamePadTouchCursorEnable",
			},
			{
				category = "Emulate",
				"GamePadEmulateCtrl",
				"GamePadEmulateShift",
				"GamePadEmulateAlt",
				"GamePadEmulateEsc",
			},
			{
				category = "Movement",
				"GamePadAnalogMovement",
				"GamePadFaceMovementMaxAngle",
				"GamePadFaceMovementMaxAngleCombat",
				"GamePadStickAxisButtons",
				"GamePadTankTurnSpeed",
			},
		},
	},
	C_VoiceChat_TextToSpeech = {
		label = "Text-to-Speech",
		hasCategories = true,
		api = {
			{
				"C_VoiceChat.SpeakText",
				"C_VoiceChat.SpeakRemoteTextSample",
				"C_VoiceChat.StopSpeakingText",
			},
			{
				category = "TtsVoices",
				"C_VoiceChat.GetTtsVoices",
				"C_VoiceChat.GetRemoteTtsVoices",
			},
			{
				category = "SpeakForMe",
				"C_VoiceChat.IsSpeakForMeActive",
				"C_VoiceChat.IsSpeakForMeAllowed",
			},
			{
				category = "Transcription",
				"C_VoiceChat.ActivateChannelTranscription",
				"C_VoiceChat.DeactivateChannelTranscription",
				"C_VoiceChat.IsTranscriptionAllowed",
			},
			{
				category = "Settings",
				"C_TTSSettings.GetSetting",
				"C_TTSSettings.SetSetting",
				"C_TTSSettings.SetDefaultSettings",
				"C_TTSSettings.GetCharacterSettingsSaved",
				"C_TTSSettings.MarkCharacterSettingsSaved",
				"C_TTSSettings.ShouldOverrideMessage",
			},
			{
				category = "Settings.Channel",
				"C_TTSSettings.GetChannelEnabled",
				"C_TTSSettings.SetChannelEnabled",
				"C_TTSSettings.SetChannelKeyEnabled",
			},
			{
				category = "Settings.ChatType",
				"C_TTSSettings.GetChatTypeEnabled",
				"C_TTSSettings.SetChatTypeEnabled",
			},
			{
				category = "Settings.Speech",
				"C_TTSSettings.GetSpeechRate",
				"C_TTSSettings.SetSpeechRate",
				"C_TTSSettings.GetSpeechVolume",
				"C_TTSSettings.SetSpeechVolume",
			},
			{
				category = "Settings.Voice",
				"C_TTSSettings.GetVoiceOptionID",
				"C_TTSSettings.SetVoiceOption",
				"C_TTSSettings.GetVoiceOptionName",
				"C_TTSSettings.SetVoiceOptionName",
			},
		},
		framexml = {
			"TextToSpeech_Speak",
		},
		event = {
			{
				"CHAT_MSG_VOICE_TEXT",
			},
			{
				category = "TTS",
				"VOICE_CHAT_TTS_PLAYBACK_FAILED",
				"VOICE_CHAT_TTS_PLAYBACK_FINISHED",
				"VOICE_CHAT_TTS_PLAYBACK_STARTED",
				"VOICE_CHAT_TTS_SPEAK_TEXT_UPDATE",
				"VOICE_CHAT_TTS_VOICES_UPDATE",
			},
			{
				category = "SpeakForMe",
				"VOICE_CHAT_SPEAK_FOR_ME_ACTIVE_STATUS_UPDATED",
				"VOICE_CHAT_SPEAK_FOR_ME_FEATURE_STATUS_UPDATED",
			},
			{
				category = "Channel",
				"VOICE_CHAT_CHANNEL_MEMBER_STT_MESSAGE",
				"VOICE_CHAT_CHANNEL_TRANSCRIBING_CHANGED",
			},
		},
		cvar = {
			"textToSpeech",
			"speechToText",
			"remoteTextToSpeech",
			"remoteTextToSpeechVoice",
			"TTSUseCharacterSettings",
		},
	},
	AddOn = {
		hasCategories = true,
		api = {
			{
				"GetAddOnInfo",
				"C_AddOns.GetAddOnMetadata",
				"GetNumAddOns",
				"IsAddOnLoaded",
			},
			{
				category = "Enable",
				"EnableAddOn",
				"EnableAllAddOns",
				"GetAddOnEnableState",
			},
			{
				category = "Disable",
				"DisableAddOn",
				"DisableAllAddOns",
			},
			{
				category = "LoadOnDemand",
				"LoadAddOn",
				"IsAddOnLoadOnDemand",
			},
			{
				category = "Dependencies",
				"GetAddOnDependencies",
				"GetAddOnOptionalDependencies",
			},
			{
				category = "VersionCheck",
				"IsAddonVersionCheckEnabled",
				"SetAddonVersionCheck",
			},
			{
				category = "Save",
				"SaveAddOns",
				"ResetAddOns",
				"ResetDisabledAddOns",
			},
		},
		framexml = {
			"UIParentLoadAddOn",
		},
		event = {
			"ADDON_LOADED",
			"ADDONS_UNLOADING",
			"SAVED_VARIABLES_TOO_LARGE",
		},
		cvar = {
			"checkAddonVersion",
		},
		uitech = {
			"AddOn loading process",
			"TOC format",
		},
		howto = {
			"Saving variables between game sessions",
		},
	},
	Authoring = {
		api = {
			"GetBuildInfo",
			"GetExpansionLevel",
			"C_AddOns.GetAddOnMetadata",
		},
		uitech = {
			"WOW_PROJECT_ID",
			"TOC format",
		},
		howto = {
			"Using the BigWigs Packager with GitHub Actions",
		},
	},
	Class = {
		hasCategories = true,
		showNamespace = true,
		state = "uncollapsed",
		api = {
			{
				category = "Unit",
				"UnitClass",
				"UnitClassBase",
			},
			{
				category = "Info",
				"GetNumClasses",
				"C_CreatureInfo.GetClassInfo",
				"GetClassInfo",
			},
			{
				category = "Localization",
				"FillLocalizedClassList",
			},
		},
	},
	Locales = {
		state = "uncollapsed",
		hasCategories = true,
		api = {
			{
				"GetLocale",
				"GetOSLocale",
			},
			{
				"GetAvailableLocales",
				"GetAvailableLocaleInfo",
			},
			{
				category = "Classes",
				"FillLocalizedClassList",
			},
			{
				category = "Declensions",
				"GetNumDeclensionSets",
				"DeclineName",
			},
			{
				category = "Numbers",
				"IsEuropeanNumbers",
				"SetEuropeanNumbers",
				"BreakUpLargeNumbers",
			},
		},
		uitech = {
			"Localization",
			"UI escape sequences#Grammar",
		},
		howto = {
			"Localizing an addon",
		},
	},
	C_Traits = {
		label = "Dragonflight Talent System",
		state = "uncollapsed",
		hasCategories = true,
		api = {
			label = "C_Traits",
			{
				category = "Config",
				"C_Traits.CommitConfig",
				"C_Traits.ConfigHasStagedChanges",
				"C_Traits.GetConfigIDBySystemID",
				"C_Traits.GetConfigIDByTreeID",
				"C_Traits.GetConfigInfo",
				"C_Traits.GetConfigsByType",
				"C_Traits.GetStagedChangesCost",
				"C_Traits.GetStagedPurchases",
				"C_Traits.RollbackConfig",
				"C_Traits.StageConfig",
			},
			{
				category = "Tree",
				"C_Traits.GetTreeCurrencyInfo",
				"C_Traits.GetTraitCurrencyInfo",
				"C_Traits.GetTreeInfo",
				"C_Traits.ResetTree",
				"C_Traits.GetTreeHash",
			},
			{
				category = "Node",
				"C_Traits.GetTreeNodes",
				"C_Traits.GetNodeInfo",
				"C_Traits.GetEntryInfo",
				"C_Traits.GetDefinitionInfo",
				"C_Traits.GetNodeCost",
				"C_Traits.GetConditionInfo",
				"C_Traits.GetTraitDescription",
			},
			{
				category = "Purchasing",
				"C_Traits.SetSelection",
				"C_Traits.CanPurchaseRank",
				"C_Traits.PurchaseRank",
				"C_Traits.CanRefundRank",
				"C_Traits.RefundRank",
				"C_Traits.RefundAllRanks",
				"C_Traits.CascadeRepurchaseRanks",
				"C_Traits.ClearCascadeRepurchaseHistory",
			},
			{
				"C_Traits.CloseTraitSystemInteraction",
				"C_Traits.GetLoadoutSerializationVersion",
				"C_Traits.GetTraitSystemWidgetSetID",
				"C_Traits.HasValidInspectData",
			},
		},
		api2 = {
			label = "C_ClassTalents",
			{
				category = "Loadouts",
				"C_ClassTalents.CanCreateNewConfig",
				"C_ClassTalents.RequestNewConfig",
				"C_ClassTalents.CommitConfig",
				"C_ClassTalents.SaveConfig",
				"C_ClassTalents.LoadConfig",
				"C_ClassTalents.RenameConfig",
				"C_ClassTalents.DeleteConfig",
				"C_ClassTalents.GetConfigIDsBySpecID",
				"C_ClassTalents.IsConfigPopulated",
				"C_ClassTalents.ImportLoadout",
			},
			{
				category = "Config",
				"C_ClassTalents.GetActiveConfigID",
				"C_ClassTalents.GetLastSelectedSavedConfigID",
				"C_ClassTalents.UpdateLastSelectedSavedConfigID",
			},
			{
				category = "Starter Build",
				"C_ClassTalents.GetHasStarterBuild",
				"C_ClassTalents.GetNextStarterBuildPurchase",
				"C_ClassTalents.GetStarterBuildActive",
				"C_ClassTalents.SetStarterBuildActive",
			},
			{
				"C_ClassTalents.CanChangeTalents",
				"C_ClassTalents.CanEditTalents",
				"C_ClassTalents.HasUnspentTalentPoints",
				"C_ClassTalents.SetUsesSharedActionBars",
			},
		},
		event = {
			"CONFIG_COMMIT_FAILED",
			"TRAIT_COND_INFO_CHANGED",
			"TRAIT_CONFIG_CREATED",
			"TRAIT_CONFIG_DELETED",
			"TRAIT_CONFIG_LIST_UPDATED",
			"TRAIT_CONFIG_UPDATED",
			"TRAIT_NODE_CHANGED",
			"TRAIT_NODE_CHANGED_PARTIAL",
			"TRAIT_NODE_ENTRY_UPDATED",
			"TRAIT_SYSTEM_INTERACTION_STARTED",
			"TRAIT_SYSTEM_NPC_CLOSED",
			"TRAIT_TREE_CHANGED",
			"TRAIT_TREE_CURRENCY_INFO_UPDATED",

			"ACTIVE_COMBAT_CONFIG_CHANGED",
			"SPECIALIZATION_CHANGE_CAST_FAILED",
			"STARTER_BUILD_ACTIVATION_FAILED",
		},
		guide = {
			"Dragonflight Talent System",
		},
	},
	UnitAura = {
		api = {
			"UnitAura",
			"UnitBuff",
			"UnitDebuff",
			"UnitAuraBySlot",
			"UnitAuraSlots",
			"C_UnitAuras.GetPlayerAuraBySpellID",
			"CancelUnitBuff",
			"CancelSpellByName",
		},
		framexml = {
			"AuraUtil.FindAura",
			"AuraUtil.FindAuraByName",
			"AuraUtil.ForEachAura",
			"SecureAuraHeaderTemplate",
		},
		widget = {
			"GameTooltip:SetUnitAura",
			"GameTooltip:SetUnitBuff",
			"GameTooltip:SetUnitDebuff",
		},
		event = {
			"UNIT_AURA",
		},
		macro = {
			"cancelaura",
		},
	},
}

return data
